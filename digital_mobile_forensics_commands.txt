
1. Install Sleuth Kit on a Linux system
sudo apt update
sudo apt install sleuthkit
tsk_version   # Verify installation

2. Extract data from allocated blocks
fls -o <offset> <disk_image> > allocated_blocks.txt

3. Extract data from unallocated blocks
blkls <disk_image> > unallocated_blocks.dd

4. Identify and extract a SQLite database
icat <disk_image> <inode_number> > database.sqlite

5. Locate and extract call log database
fls -r <disk_image> | grep -i 'calllog' 
icat <disk_image> <inode_number> > calllog.db

6. Query call log database
sqlite3 calllog.db
SELECT number, date, duration FROM calls;

7. Locate and extract SMS database
fls -r <disk_image> | grep -i 'mmssms.db'
icat <disk_image> <inode_number> > mmssms.db

8. Query SMS database
sqlite3 mmssms.db
SELECT address, date, body FROM sms WHERE address = '<phone_number>';

9. Locate and extract contacts database
fls -r <disk_image> | grep -i 'contacts'
icat <disk_image> <inode_number> > contacts.db

10. Query contacts database
sqlite3 contacts.db
SELECT display_name, phone_number FROM contacts;

11. Install MVT (Mobile Verification Toolkit)
pip install mvt

12. Connect Android using adb and list packages
adb devices
adb shell pm list packages

13. Extract bug report
adb bugreport > bugreport.zip

14. Collect system logs
adb logcat > system_logs.txt

15. Extract APK file of an installed app
adb shell pm path <package_name>
adb pull <apk_path>

16. Generate bodyfile timeline using Sleuth Kit
fls -m / -r <disk_image> | mactime -d -b - > timeline.csv

17. Merge timestamps with Sleuth Kit timeline
# Export timestamps from databases and combine with timeline.csv manually.

18. Enable USB debugging
# On Android: Go to Settings > Developer options > Enable USB debugging

19. List installed packages
adb shell pm list packages

20. Pull APK file
adb shell pm path <package_name>
adb pull <path_to_apk>

21. Extract system logs using logcat
adb logcat > logs.txt

22. Generate bug report
adb bugreport > bugreport.zip

23. Extract device properties
adb shell getprop > device_properties.txt

24. Locate call logs in forensic image
fls -r <image> | grep -i 'calllog'

25. Extract call logs using Sleuth Kit
icat <image> <inode_number> > calllog.db

26. Write query to list missed calls
sqlite3 calllog.db
SELECT number, date FROM calls WHERE type=3;

27. Extract SMS database
icat <disk_image> <inode_number> > mmssms.db

28. Query SMS within a date range
sqlite3 mmssms.db
SELECT address, body, date FROM sms WHERE date BETWEEN <start> AND <end>;

29. Locate contacts database
fls -r <image> | grep -i 'contacts'
icat <image> <inode_number> > contacts.db

30. Query contacts list
sqlite3 contacts.db
SELECT display_name, phone_number FROM contacts;

31. Challenges in extracting deleted SMS
- Deleted SMS may be in unallocated space.
- Can use tsk_recover or carve data.
- Recovery depends on overwriting and database vacuuming.
Here's a complete breakdown for the mobile forensics lab task to list all contacts with phone numbers from an Android phone using a SQLite query. This assumes you have access to the contacts database (usually found in /data/data/com.android.providers.contacts/databases/contacts2.db).


---

1. Aim and Algorithm

Aim:
To retrieve and list all contacts stored on an Android device that have associated phone numbers using a SQL query on the contacts2.db SQLite database.

Algorithm:

1. Access the Android device using adb and extract the contacts2.db database.


2. Open the contacts2.db file using a SQLite browser or CLI.


3. Use a SQL query to join the contacts and data tables to get names and phone numbers.


4. Display the resulting contact names and numbers.




---

2. Program and Procedure

Tools Required:

Android Debug Bridge (adb)

SQLite CLI or SQLite Browser

Access to /data/data/com.android.providers.contacts/databases/contacts2.db


Steps:

1. Connect the Android device and enable USB debugging.


2. Use adb to pull the database:

adb root
adb pull /data/data/com.android.providers.contacts/databases/contacts2.db


3. Open the database using the SQLite CLI:

sqlite3 contacts2.db


4. Run the following SQL query to list all contacts with phone numbers:

SELECT 
    display_name, 
    data1 AS phone_number 
FROM 
    view_data 
WHERE 
    mimetype = 'vnd.android.cursor.item/phone_v2';

Alternatively, if view_data is not available:

SELECT 
    raw_contacts.display_name, 
    data.data1 AS phone_number 
FROM 
    raw_contacts 
JOIN 
    data 
ON 
    raw_contacts._id = data.raw_contact_id 
WHERE 
    data.mimetype = 'vnd.android.cursor.item/phone_v2';




---

3. Execution and Results

Execution:

Open terminal and execute the adb pull command to get contacts2.db.

Launch SQLite CLI and load the database.

Run the SQL query as given above.


Results:

The query will return a list of contact names and their associated phone numbers extracted from the contacts database.



---

4. Output

Example output:

display_name       | phone_number
-------------------|-------------------
John Smith         | +1234567890
Alice Johnson      | +1987654321
Bob Lee            | 5551234567


---

Let me know if you'd like a Python script to automate this process or if you want to extract this from a specific file.
